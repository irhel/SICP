#lang scheme
(define (square x) 
  (* x x))
(define (product-recursive term a next b)
  (if (> a b)
      1
      (* (term a) (product-recursive term (next a) next b))))
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))
(define (fact n)
  (define (identity x)
    x)
  (define (inc x)
    (+ x 1))
  (product-recursive identity 1 inc n))
(define (pi-approx n)
  (define (inc x)
    (+ x 1.0))
  (define (pi-approx-term x)
    (/ (* 4.0 (square x)) (- (* 4.0 (square x)) 1)))
  (* 2 (product pi-approx-term 1.0 inc n)))
(pi-approx 100)
(pi-approx 1000)
(pi-approx 10000)
(pi-approx 100000)
