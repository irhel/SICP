#lang scheme
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (is-negative? x)
  (< x 0))
(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (cond ((and (> n 0) (> d 0)) (cons (/ n g) (/ d g)))
          ((and (< n 0) (> d 0)) (cons (/ n g) (/ d g)))
          (else (cons (/ (* -1 n) g) (/ (* -1 d) g))))))
(define (numer x)
  (car x))
(define (denom x)
  (cdr x))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) 
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y) (* numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define one-half (make-rat 1 -2))
(define one-third (make-rat 1 3))
(print-rat (mul-rat one-half one-half))
(print-rat (make-rat 6 9)) ; 2/3 
(print-rat (make-rat -6 9)) ; -2/3 
(print-rat (make-rat 6 -9)) ; -2/3 
(print-rat (make-rat -6 -9)) ; 2/3
