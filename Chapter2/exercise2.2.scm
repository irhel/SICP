#lang racket
(define (make-point x y)
  (cons x y))
(define (x-point x)
  (car x))
(define (y-point x)
  (cdr x))
(define (make-segment x y)
  (cons x y))
(define (start-segment x)
  (car x))
(define (end-segment x)
  (cdr x))
(define (arithmetic-mean x y)
  (/ (+ x y) 2))
(define (midpoint-segment x)
  (let ((mid-point-x (arithmetic-mean (x-point (start-segment x)) (x-point (end-segment x))))
        (mid-point-y (arithmetic-mean (y-point (start-segment x)) (y-point (end-segment x)))))
    (make-point mid-point-x mid-point-y)))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define point-a (make-point 2 3))
(define point-b (make-point 2 5))
(define segment-ab (make-segment point-a point-b))
(print-point point-a)
(print-point point-b)
(define midpoint-segment-ab (midpoint-segment segment-ab))
(print-point midpoint-segment-ab)