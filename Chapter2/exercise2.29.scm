#lang racket
;Some test cases are obtained from Bill The Lizard. http://www.billthelizard.com
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))
(define (total-branch-weight branch)
  (cond ((null? branch) 0)
        ((list? (branch-structure branch))
         (+ (total-branch-weight (left-branch (branch-structure branch)))
            (total-branch-weight (right-branch (branch-structure branch)))))
        (else (car (cdr branch)))))
(define (total-weight mobile)
  (+ (total-branch-weight (left-branch mobile))
     (total-branch-weight (right-branch mobile))))
(define (balanced? mobile)
  (if (not (list? mobile))
      #t
      (and (= (torque (left-branch mobile)) (torque (right-branch mobile)))
           (balanced? (branch-structure (left-branch mobile)))
           (balanced? (branch-structure (right-branch mobile))))))
(define (torque branch)
  (* (branch-length branch) (total-branch-weight branch)))
(define m1 (list (list 2 3) (list 2 1)))
(total-weight m1)
(define m2 (list (list 2 (list (list 2 3) (list 2 1))) (list 4 1)))
(total-weight m2)
(define balanced (list (list 2 3) (list 3 2)))
(balanced? balanced)
(define a (make-mobile (make-branch 2 3) (make-branch 2 3)))
(balanced? a)
(define b (make-mobile (make-branch 2 3) (make-branch 4 5)))
(balanced? b)
(define d (make-mobile (make-branch 10 a) (make-branch 12 5)))
(balanced? d)
;If you change the list to cons in the representation the definitions of right-branch and branch-structure will change.
;right-branch -> (cdr branch) branch-structure -> (cdr branch).