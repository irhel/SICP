#lang scheme
(define (distance x y)
  (define (square x)
    (* x x))
  (let ((a (- (x-point y) (x-point x)))
        (b (- (y-point y) (y-point x))))
  ((lambda (x y) (sqrt (+ (square x) (square y)))) a b)))
(define (make-point x y)
  (cons x y))
(define (x-point x)
  (car x))
(define (y-point x)
  (cdr x))
(define (make-segment x y)
  (cons x y))
(define (start-segment x)
  (car x))
(define (end-segment x)
  (cdr x))
(define (make-rect x y)
  (cons x y))
(define (get-length r)
  (car r))
(define (get-width r)
  (cdr r))
(define (area r)
  (* (get-length r) (get-width r)))
(define (perimeter r)
  (+ (* 2 (get-length r)) (* 2 (get-width r))))

(define rect-1 (make-rect 2 3))
(area rect-1)
(perimeter rect-1)

(define point-1 (make-point 3 5))
(define point-2 (make-point 8 5))
(define point-3 (make-point 3 8))
(define point-4 (make-point 8 8))
(define len-rect2 (distance point-1 point-2))
(define wid-rect2 (distance point-1 point-3))
(define rect-2 (make-rect len-rect2 wid-rect2))
(area rect-2)
(perimeter rect-2)